import configparser
from datetime import datetime
import os
from pyspark.sql import SparkSession
from pyspark.sql.functions import udf, col
from pyspark.sql.functions import year, month, dayofmonth, hour, weekofyear, date_format


config = configparser.ConfigParser()
config.read('dl.cfg')

os.environ['AWS_ACCESS_KEY_ID']=config['AWS_ACCESS_KEY_ID']
os.environ['AWS_SECRET_ACCESS_KEY']=config['AWS_SECRET_ACCESS_KEY']


def create_spark_session():
    """
    Step to create spark session
    """
    spark = SparkSession \
        .builder \
        .config("spark.jars.packages", "org.apache.hadoop:hadoop-aws:2.7.0") \
        .getOrCreate()
    return spark


def process_song_data(spark, input_data, output_data):
    """
    Step responsable for importing and loading data from S3, and after processed will result at an output of 'song' and 'artists' tables.
    Imputs: Spark : Spark session; Input_data : where all the data will be stored; output_data: Place where data will be written, and specified according to the requested criteria
    """
    #1 get filepath to song data file
    song_data = os.path.join(input_data,'song_data/*/*/*.json')
    
    #2 read song data file
    df_songs = spark.read.json(song_data)

    #3 extract columns to create songs table
    songs_table = df_songs.select('song_id', 'title', 'artist_id', 'duration', 'year').drop_duplicates()
    
    #4 write songs table to parquet files partitioned by year and artist
    songs_table.write.partitionBy('year', 'artist_id').parquet(os.path.join(output_data, 'songs', 'songs.parquet'), 'overwrite')  
                        

    #5 extract columns to create artists table
    artists_table = df_songs.select('artist_id', 'artist_name', 'artist_location', 'artist_latitude', 'artist_longitude')\
                    .withColumnRenamed('artist_name', 'name') \
                    .withColumnRenamed('artist_location', 'location') \
                    .withColumnRenamed('artist_latitude', 'latitude') \
                    .withColumnRenamed('artist_longitude', 'longitude') \
                    .dropDuplicates()
    
    
    #6 write artists table to parquet files
    artists_table.write.parquet(os.path.join(output_data, 'artists', 'artists.parquet'), 'overwrite')


def process_log_data(spark, input_data, output_data):
    """
    Step responsable for importing and loading log data from S3, and after processed will result at an output of requested tables.
    Imputs: Spark : Spark session; Input_data : where all the data will be stored; output_data: Place where data will be written, and specified according to the requested criteria
    """
    
    #7 get filepath to log data file
    log_data = os.path.join(input_data, 'log_data/*/*/*.json')

    #8 read log data file
    df = spark.read.json(log_data)
    
    #9 filter by actions for song plays
    df = df.filter(df.page == 'NEXTSONG')

    #10 extract columns for users table    
    users_table = df.select('userid', 'firstname', 'lastname', 'gender', 'level').dropduplicates()
    
    
    #11 write users table to parquet files
    users_table.write.parquet(os.path.join(output_data, "users"), mode="overwrite")

    #12 create timestamp column from original timestamp column
    get_timestamp = udf(lambda x: (x/100))
    df = df.withcolumn('timestamp', get_timestamp('ts')) 
    
    #13 create datetime column from original timestamp column
    get_datetime = udf(lambda x: str(datetime.fromtimestamp(int(x)/100)))
    df = df.withcolumn("datetime", get_datetime('df.ts'))
    
    #14 extract columns to create time table
    time_table = df.select("datetime").withcolumn("hour",hour("datetime")).withcolumn("day",dayofmonth ("datetime")).withcolumn("week",weekofyear("datetime")).withcolumn("month",month("datetime")).withcolumn("year",year ("datetime")).withcolumn("weekday", dayofweek("datetime")).dropduplicates()
    
    #15 write time table to parquet files partitioned by year and month
    time_table.write.parquet(os.path.join(output_data,"time"), mode='overwrite', partitionby=["year","month"])

    #16 read in song data to use for songplays table
    song_data = os.path.join(input_data, 'song_data/*/*/*.json')
    df_songs = spark.read.json(song_data)

    #17 extract columns from joined song and log datasets to create songplays table 
    df_song = df_song.alias('df_song')
    joined_df = actions_df.join(df_song, col('df.artist') == col('df_song.artist_name'), 'inner')
    songplays_table = df_joined.select(col('datetime').alias('start_time'),
                                       col('userid').alias('user_id'),
                                       col('level'),
                                       col('song_id').alias('song_id'),
                                       col('artist_id').alias('artist_id'),
                                       col('sessionid').alias('session_id'),
                                       col('location'),
                                       col('useragent').alias('user_agent'),
                                       year(col('datetime')).alias('year'),
                                       month(col('datetime')).alias('month')) \
                                       .withcolumn('songplay_id', monotonically_increasing_id()).dropduplicates()

    #18 write songplays table to parquet files partitioned by year and month
    songplays_table.write.mode('overwrite').partitionBy('year','month').parquet(os.path.join(output_data,'songplays','songplays_table.parquet'))         


def main():
    
    """
    Create spark session
    input: read and process data
    output_data: write the select data
    """
    spark = create_spark_session()
    input_data = "s3a://udacity-dend/"
    output_data = "s3a://udacity-OutPut/"
    
    process_song_data(spark, input_data, output_data)    
    process_log_data(spark, input_data, output_data)


if __name__ == "__main__":
    main()
